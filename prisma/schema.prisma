generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  firstName String @db.VarChar(255)
  username String   @db.VarChar(255)
  email    String   @db.VarChar(255)
  password String   @db.VarChar(255)
  fonction String @db.VarChar(255)
  role_id Int
  
  role Role @relation(fields: [role_id], references: [role_id])
  evaluations_formateur  Evaluation[] @relation("formateur")
  evaluations_participant Evaluation[] @relation("participant")
  
}

model Role {
  role_id     Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  slug        String   @db.VarChar(255)
  users User[]
}

model Evaluation {
  evaluation_id       Int            @id @default(autoincrement())
  formateur_id        Int
  participant_id      Int
  note_totale         Int
  commentaire         String?
  date                DateTime
  contrat_id          Int
  formateur           User           @relation("formateur", fields: [formateur_id], references: [user_id])
  participant         User           @relation("participant", fields: [participant_id], references: [user_id])
  contrat             Contrat        @relation(fields: [contrat_id], references: [contrat_id])
  evaluation_items    Evaluation_Item[]
  }

model Evaluation_Item {
  evaluation_item_id  Int              @id @default(autoincrement())
  evaluation_id       Int
  methode_item_id     Int
  note                Int
  commentaire         String?
  evaluation          Evaluation      @relation(fields: [evaluation_id], references: [evaluation_id])
  methode_item        Methode_Item    @relation(fields: [methode_item_id], references: [methode_item_id])
  }

model Client {
  client_id          Int              @id @default(autoincrement())
  name                String
  address            String?
  city               String?
  zipcode            String?
  contrats           Contrat[]
}


model Contrat {
  contrat_id          Int            @id @default(autoincrement())
  client_id           Int
  theme          String
  client              Client @relation(fields: [client_id], references: [client_id])
  contrat_methodes    Contrat_Methode[]
  evaluations         Evaluation[]
}

model Contrat_Methode {
  contrat_methode_id  Int            @id @default(autoincrement())
  contrat_id          Int
  methode_id           Int
  contrat             Contrat        @relation(fields: [contrat_id], references: [contrat_id])
  methode              Methode         @relation(fields: [methode_id], references: [methode_id])
}

model Tag {
  tag_id             Int              @id @default(autoincrement())
  name                String
  description        String?
  methode_tags       Methode_Tag[]
  }

  model Methode_Tag {
  methode_tag_id     Int              @id @default(autoincrement())
  methode_id         Int
  tag_id             Int
  methode            Methode         @relation(fields: [methode_id], references: [methode_id])
  tag                Tag             @relation(fields: [tag_id], references: [tag_id])
}

model Methode {
  methode_id   Int            @id @default(autoincrement())
  name          String
  description  String?
  methode_items Methode_Item[]
  contrat_methodes Contrat_Methode[]
  methode_tags Methode_Tag[]
}

model Item {
  item_id     Int            @id @default(autoincrement())
  nom         String
  description String?
  methode_items Methode_Item[]
}

model Methode_Item {
  methode_item_id Int         @id @default(autoincrement())
  methode_id      Int
  item_id         Int
  methode        Methode    @relation(fields: [methode_id], references: [methode_id])
  item            Item        @relation(fields: [item_id], references: [item_id])
  evaluation_items Evaluation_Item[]
}

model Item_Note {
  item_note_id           Int             @id @default(autoincrement())
  evaluation_item_id     Int
  evaluation_id          Int
  note                   Int
  commentaire            String?
}